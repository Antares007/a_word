b {
  G(Navy    ) { P; Blue   (t, a, b, o, s); }
  G(Lime    ) { P; Green  (t, a, b, o, s); }
  G(Maroon  ) { P; Red    (t, a, b, o, s); }
  G(Fuchsia ) { P; }
  G(Olive   ) { P; Printf("\n"); Yellow (t, a, b, o, s); }
}.
m {
  G(Yellow  ) { P; Yellow (t, a, b, o, s); }
  G(Purple  ) { P; Purple (t, a, b, o, s); }
  G(Red     ) { P; Red    (t, a, b, o, s); }
  G(Green   ) { P; Green  (t, a, b, o, s); }
  G(Blue    ) { P; Blue   (t, a, b, o, s); }
  G(Navy    ) { P; Navy   (t, a, b, o, s); }
  G(Lime    ) { P; Lime   (t, a, b, o, s); }
  G(Maroon  ) { P; Maroon (t, a, b, o, s); }
  G(Fuchsia ) { P; Fuchsia(t, a, b, o, s); }
  G(Olive   ) { P; Olive  (t, a, b, o, s); }
}.
o {
  G(Yellow  ) { P; Lime   (t, a, b, o, s); }
  G(Purple  ) { P; Fuchsia(t, a, b, o, s); }
  G(Red     ) { P; Maroon (t, a, b, o, s); }
  G(Green   ) { P; Olive  (t, a, b, o, s); }
  G(Blue    ) { P; Navy   (t, a, b, o, s); }
}.
term {
  G(Green   ) {
    char*pst = (char*)o[--a];
    long pos = (long)o[--a];
    long len = (long)o[--a];
    char*str = (char*)o[--a];
    if (pos < len && str[pos] == pst[0]) {
      o[a++] = (void*)str;
      o[a++] = (void*)len;
      o[a++] = (void*)pos + 1;
      Green(t, a, b, o, s);
    } else {
      o[a++] = (void*)str;
      o[a++] = (void*)len;
      o[a++] = (void*)pos;
      Blue(t, a, b, o, s);
    }
  } }.
a_ { G(Lime) { o[a++] = "a"; Lime(t, a, b, o, s); } }.
b_ { G(Lime) { o[a++] = "b"; Lime(t, a, b, o, s); } }.
S { G(Lime ) { } }.
NOT {
  G(Yellow) { Lime  (t, a, b, o, s); }
  G(Red   ) { Yellow(t, a, b, o, s); }
  G(Green ) { Olive (t, a, b, o, s); }
  G(Lime  ) { Green (t, a, b, o, s); } }.
AND {
  G(Yellow) { Lime  (t, a, b, o, s); }
  G(Green ) { Yellow(t, a, b, o, s); }
  G(Lime  ) { Green (t, a, b, o, s); } }.
OR {
  G(Yellow) { Lime  (t, a, b, o, s); }
  G(Blue  ) { Yellow(t, a, b, o, s); }
  G(Green ) { Olive (t, a, b, o, s); }
  G(Lime  ) { Green (t, a, b, o, s); } }.
ORAND {
  G(Yellow) { Lime  (t, a, b, o, s); }
  G(Blue  ) { Yellow(t, a, b, o, s); }
  G(Green ) { Yellow(t, a, b, o, s); }
  G(Lime  ) { Green (t, a, b, o, s); } }.
