o {
  G(Yellow  ) { Lime   (o, s, a); }
  G(Purple  ) {                   }
  G(Red     ) { Maroon (o, s, a); }
  G(Green   ) { Olive  (o, s, a); }
  G(Blue    ) { Navy   (o, s, a); }
}.
b {
  G(Navy    ) { Blue   (o, s, a); }
  G(Lime    ) { Green  (o, s, a); }
  G(Maroon  ) { Red    (o, s, a); }
  G(Fuchsia ) { }
  G(Olive   ) { o[3] = (void*)1; Yellow (o, s, a); }
}.
T {
  n_t jmps[12];
  G(Yellow  ) { o[--s]=Yellow_ray;o[--s]=Yellow; jmps[9](o,s,a); }
  G(Purple  ) { o[--s]=Yellow_ray;o[--s]=Purple; jmps[8](o,s,a); }
  G(Red     ) { o[--s]=Yellow_ray;o[--s]=Red;    jmps[7](o,s,a); }
  G(Green   ) { o[--s]=Yellow_ray;o[--s]=Green;  jmps[6](o,s,a); }
  G(Blue    ) { o[--s]=Yellow_ray;o[--s]=Blue;   jmps[5](o,s,a); }
  G(Navy    ) { o[--s]=Yellow_ray;o[--s]=Navy;   jmps[4](o,s,a); }
  G(Lime    ) { o[--s]=Yellow_ray;o[--s]=Lime;   jmps[3](o,s,a); }
  G(Maroon  ) { o[--s]=Yellow_ray;o[--s]=Maroon; jmps[2](o,s,a); }
  G(Fuchsia ) { o[--s]=Yellow_ray;o[--s]=Fuchsia;jmps[1](o,s,a); }
  G(Olive   ) { o[--s]=Yellow_ray;o[--s]=Olive;  jmps[0](o,s,a); }
}.
NOT {
  G(Yellow) { Lime  (o, s, a); }
  G(Red   ) { Yellow(o, s, a); }
  G(Green ) { Olive (o, s, a); }
  G(Lime  ) { Green (o, s, a); }
}.
AND {
  G(Yellow) { Lime  (o, s, a); }
  G(Green ) { Yellow(o, s, a); }
  G(Lime  ) { Green (o, s, a); }
}.
OR {
  G(Yellow) { Lime  (o, s, a); }
  G(Blue  ) { Yellow(o, s, a); }
  G(Green ) { Olive (o, s, a); }
  G(Lime  ) { Green (o, s, a); }
}.
ORAND {
  G(Yellow) { Lime  (o, s, a); }
  G(Blue  ) { Yellow(o, s, a); }
  G(Green ) { Yellow(o, s, a); }
  G(Lime  ) { Green (o, s, a); }
}.
one {
  G(Lime  ) { 
    o[a++] = (void*)1;
    Lime(o, s, a);
  }
}.
tab {
  G(Lime    ) { Green    (o, s, a); }
  G(Maroon  ) { Red      (o, s, a); }
  G(Fuchsia ) { }
  G(Navy    ) { Blue     (o, s, a); }
  G(Olive   ) { ((n_t*)o)[s](o, s + 1, a); }
}.
plus {
  G(Green) {
    long r    = (long)o[--a];
    long l    = (long)o[--a];
    o[a++]    = (void*)(l+r);
    Green(o, s, a);
  }
}.
astr { G(Lime) { o[a++] = "a"; Lime(o, s, a); } }.
bstr { G(Lime) { o[a++] = "b"; Lime(o, s, a); } }.
cstr { G(Lime) { o[a++] = "c"; Lime(o, s, a); } }.

sstr { G(Lime) { o[a++] = "s"; Lime(o, s, a); } }.
tstr { G(Lime) { o[a++] = "t"; Lime(o, s, a); } }.
ustr { G(Lime) { o[a++] = "u"; Lime(o, s, a); } }.

xstr { G(Lime) { o[a++] = "x"; Lime(o, s, a); } }.
ystr { G(Lime) { o[a++] = "y"; Lime(o, s, a); } }.
zstr { G(Lime) { o[a++] = "z"; Lime(o, s, a); } }.
newline { G(Lime) { o[a++] = "\n"; Lime(o, s, a); } }.
abc
  astr;
  bstr;
  cstr.
stu
  sstr;
  tstr;
  ustr.
xyz
  xstr;
  ystr;
  zstr.
two
  one one plus;
  one one plus one plus.
three
  two plus one;
  one plus one plus one.
four
  two plus two;
  one plus three.
id {}.
show
  four four AND print_2ld.
show2
  abc stu xyz print_sss.

baaa { G(Lime) { o[a++] = "baaaaaaaa"; Lime(o, s, a); } }.
ssss { G(Lime) { o[a++] = "ssss"; Lime(o, s, a); } }.

t_term { G(Green) { const char*str = (const char*)o[a-1]; if (str[0] == 't') (o[a++] = str+1), Green(o, s, a); else Blue(o, s, a); } }.
a_term { G(Green) { const char*str = (const char*)o[a-1]; if (str[0] == 'a') (o[a++] = str+1), Green(o, s, a); else Blue(o, s, a); } }.
b_term { G(Green) { const char*str = (const char*)o[a-1]; if (str[0] == 'b') (o[a++] = str+1), Green(o, s, a); else Blue(o, s, a); } }.
s_term { G(Green) { const char*str = (const char*)o[a-1]; if (str[0] == 's') (o[a++] = str+1), Green(o, s, a); else Blue(o, s, a); } }.
empty {}.

sS
  Green s_term sS sS;
  Green empty.
S
  Green b_term;
  Green S a_term.
show3
  ssss sS print_s.
show4
  baaa S print_s.

print_ld { G(Green) { void (*print)(const char *, ...) = o[0];
                      print("%ld\n", (long)o[--a]);
                      Usleep(2000000); 
                      Green(o, s, a); } }.
print_2ld { G(Green) { void (*print)(const char *, ...) = o[0];
                      print("%ld %ld\n", (long)o[a-2], (long)o[a-1]);
                      Usleep(2000000); 
                      Green(o, s, a-2); } }.
print_s { G(Green) {  void (*print)(const char *, ...) = o[0];
                      print("%s\n", (char*)o[a-1]);
                      Usleep(200000);
                      Green(o, s, a-1); } }.
print_ss { G(Green) { void (*print)(const char *, ...) = o[0];
                      print("%s %s\n", (char*)o[a-1], (char*)o[a-2]);
                      Usleep(200000);
                      Green(o, s, a-2); } }.
print_sss { G(Green) {void (*print)(const char *, ...) = o[0];
                      print("%s %s %s\n", (char*)o[a-1], (char*)o[a-2], (char*)o[a-3]);
                      Usleep(200000);
                      Green(o, s, a-3); } }.
