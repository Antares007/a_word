o {
  G(Yellow  ) { P, Lime   (t, a, b, o, s); }
  G(Purple  ) { P;        o[a] = (void*)t; }
  G(Red     ) { P, Maroon (t, a, b, o, s); }
  G(Green   ) { P, Olive  (t, a, b, o, s); }
  G(Blue    ) { P, Navy   (t, a, b, o, s); }
}.
b {
  G(Navy    ) { P, Blue   (t, a, b, o, s); }
  G(Lime    ) { P, Green  (t, a, b, o, s); }
  G(Maroon  ) { P, Red    (t, a, b, o, s); }
  G(Fuchsia ) { P; }
  G(Olive   ) { o[3] = (void*)1; P, Yellow (t, a, b, o, s); }
}.
id2 { }.
id { }.
NOT {
  G(Yellow) { Lime  (t, a, b, o, s); }
  G(Red   ) { Yellow(t, a, b, o, s); }
  G(Green ) { Olive (t, a, b, o, s); }
  G(Lime  ) { Green (t, a, b, o, s); }
}.
AND {
  G(Yellow) { Lime  (t, a, b, o, s); }
  G(Green ) { Yellow(t, a, b, o, s); }
  G(Lime  ) { Green (t, a, b, o, s); }
}.
OR {
  G(Yellow) { Lime  (t, a, b, o, s); }
  G(Blue  ) { Yellow(t, a, b, o, s); }
  G(Green ) { Olive (t, a, b, o, s); }
  G(Lime  ) { Green (t, a, b, o, s); }
}.
ORAND {
  G(Yellow) { Lime  (t, a, b, o, s); }
  G(Blue  ) { Yellow(t, a, b, o, s); }
  G(Green ) { Yellow(t, a, b, o, s); }
  G(Lime  ) { Green (t, a, b, o, s); }
}.
one {
  G(Lime  ) { 
    o[a++] = (void*)1;
    Lime(t, a, b, o, s);
  }
}.
tab {
  G(Lime    ) { Green  (t, a, b, o, s); }
  G(Maroon  ) { Red    (t, a, b, o, s); }
  G(Fuchsia ) {}
  G(Navy    ) { ((n_t*)o)[s + 0](t, a, b, o, s + 3); }
  G(Olive   ) { ((n_t*)o)[s + 1](t, a, b, o, s + 3); }
}.
plus {
  G(Green) {
    long r    = (long)o[--a];
    long l    = (long)o[--a];
    o[a++]    = (void*)(l+r);
    Green(t, a, b, o, s);
  }
}.
print_ld {
  G(Green) {
    void (*print)(const char *, ...) = o[0];
    print("%ld\n", (long)o[--a]);
    Green(t, a, b, o, s);
  }
}.
two
  one one plus one plus;
  one plus one;
  one one plus one plus one plus.
show
  two two plus AND print_ld.
