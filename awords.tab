b {
  G(Yellow  ) { Printf("\n");
                P; Yellow(t, a, b, o, s); }
  G(Navy    ) { P; Blue  (t, a, b, o, s); }
  G(Lime    ) { P; Green (t, a, b, o, s); }
  G(Maroon  ) { P; }
  G(Fuchsia ) { P; }
  G(Olive   ) { P; Yellow(t, a, b, o, s); }
}.
m  {Tword(
  "tab A o",
  "tab B o",
  "tab C o");}.
m2 { Tword("tab D o", "tab E o", "tab F m3 o"); }.
m3 { Tword("tab G o", "tab H o", "tab I o"); }.
A { G(Green) { P_; Green(t,a,b,o,s); } }.
B { G(Green) { P_; Green(t,a,b,o,s); } }.
C { G(Green) { P_; Green(t,a,b,o,s); } }.
D { G(Green) { Printf("  "); P_; Green(t,a,b,o,s); } }.
E { G(Green) { Printf("  "); P_; Green(t,a,b,o,s); } }.
F { G(Green) { Printf("  "); P_; Green(t,a,b,o,s); } }.
G { G(Green) { Printf("    "); P_; Green(t,a,b,o,s); } }.
H { G(Green) { Printf("    "); P_; Green(t,a,b,o,s); } }.
I { G(Green) { Printf("    "); P_; Green(t,a,b,o,s); } }.
o {
  G(Yellow  ) { P; Lime   (t, a, b, o, s); }
  G(Purple  ) { P; Fuchsia(t, a, b, o, s); }
  G(Red     ) { P; Maroon (t, a, b, o, s); }
  G(Green   ) { P; Olive  (t, a, b, o, s); }
  G(Blue    ) { P; Navy   (t, a, b, o, s); }
}.
tab {
  G(Yellow  ) { P; Yellow           (t,               a, b, o, s); }
  G(Navy    ) { P; ((n_t *)o)[s + 0](t,               a, b, o, s + 4); }
  G(Lime    ) { P; Green            (t,               a, b, o, s); }
  G(Maroon  ) { P; ((n_t *)o)[s + 2](t,               a, b, o, s + 4); }
  G(Fuchsia ) { P; }
  G(Olive   ) { P; ((n_t *)o)[s + 1]((long)o[s + 3],  a, b, o, s + 4); }
}.
term {
  G(Green   ) {
    char*pst = (char*)o[--a];
    long pos = (long)o[--a];
    long len = (long)o[--a];
    char*str = (char*)o[--a];
    if (pos < len && str[pos] == pst[0]) {
      o[a++] = (void*)str;
      o[a++] = (void*)len;
      o[a++] = (void*)pos + 1;
      Green(t, a, b, o, s);
    } else {
      o[a++] = (void*)str;
      o[a++] = (void*)len;
      o[a++] = (void*)pos;
      Blue(t, a, b, o, s);
    }
  } }.
a_ { G(Lime ) { o[a++] = "a"; Lime(t, a, b, o, s); } }.
b_ { G(Lime ) { o[a++] = "b"; Lime(t, a, b, o, s); } }.
sS { }.
NOT {
  G(Yellow  ) { P; Lime  (t, a, b, o, s); }
  G(Red     ) { P; Yellow(t, a, b, o, s); }
  G(Green   ) { P; Olive (t, a, b, o, s); }
  G(Lime    ) { P; Green (t, a, b, o, s); } }.
AND {
  G(Yellow  ) { P; Lime  (t, a, b, o, s); }
  G(Green   ) { P; Yellow(t, a, b, o, s); }
  G(Lime    ) { P; Green (t, a, b, o, s); } }.
OR {
  G(Yellow  ) { P; Lime  (t, a, b, o, s); }
  G(Blue    ) { P; Yellow(t, a, b, o, s); }
  G(Green   ) { P; Olive (t, a, b, o, s); }
  G(Lime    ) { P; Green (t, a, b, o, s); } }.
ORAND {
  G(Yellow  ) { P; Lime  (t, a, b, o, s); }
  G(Blue    ) { P; Yellow(t, a, b, o, s); }
  G(Green   ) { P; Yellow(t, a, b, o, s); }
  G(Lime    ) { P; Green (t, a, b, o, s); } }.
