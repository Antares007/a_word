o {
  G(Yellow  ) { P, Lime   (ο, σ, α, ρ); }
  G(Purple  ) { P; }
  G(Red     ) { P, Maroon (ο, σ, α, ρ); }
  G(Green   ) { P, Olive  (ο, σ, α, ρ); }
  G(Blue    ) { P, Navy   (ο, σ, α, ρ); }
}.
b {
  G(Navy    ) { P, Blue  (ο, σ, α, ρ); }
  G(Lime    ) { P, Green (ο, σ, α, ρ); }
  G(Maroon  ) { P, Red   (ο, σ, α, ρ); }
  G(Fuchsia ) {}
  G(Olive   ) { P, Yellow(ο, σ, α, 1); }
}.
tab {
  G(Navy    ) { P, Blue  (ο, σ, α, ρ); }
  G(Lime    ) { P, Green (ο, σ, α, ρ); }
  G(Maroon  ) { P, Red   (ο, σ, α, ρ); }
  G(Fuchsia ) {}
  G(Olive   ) { P, ((n_t*)ο)[σ - 1](ο, σ - 1, α, ρ); }
}.
not {
  G(Yellow) { Lime  (ο, σ, α, ρ); }
  G(Red   ) { Yellow(ο, σ, α, ρ); }
  G(Green ) { Olive (ο, σ, α, ρ); }
  G(Lime  ) { Green (ο, σ, α, ρ); }
}.
and {
  G(Yellow) { Lime  (ο, σ, α, ρ); }
  G(Green ) { Yellow(ο, σ, α, ρ); }
  G(Lime  ) { Green (ο, σ, α, ρ); }
}.
or {
  G(Yellow) { Lime  (ο, σ, α, ρ); }
  G(Blue  ) { Yellow(ο, σ, α, ρ); }
  G(Green ) { Olive (ο, σ, α, ρ); }
  G(Lime  ) { Green (ο, σ, α, ρ); }
}.
orand {
  G(Yellow) { Lime  (ο, σ, α, ρ); }
  G(Blue  ) { Yellow(ο, σ, α, ρ); }
  G(Green ) { Yellow(ο, σ, α, ρ); }
  G(Lime  ) { Green (ο, σ, α, ρ); }
}.
one {
  G(Lime  ) {
    ο[α++] = (void*)1;
    Lime(ο, σ, α, ρ);
  }
}.
plus {
  G(Green) {
    long r = (long)ο[--α];
    long l = (long)ο[--α];
    ο[α++] = (void*)(l + r);
    Green(ο, σ, α, ρ);
  }
}.
printlll {
  void (*p)(const char *, ...);
  G(Green) {
    p = ο[0];
    long v1 = (long)ο[--α];
    long v2 = (long)ο[--α];
    long v3 = (long)ο[--α];
    p("%ld %ld %ld\n", v1, v2, v3);
    ((void (*)(long))ο[1])(200000);
    Green(ο, σ, α, ρ);
  }
}.

two
  tab one one plus o.
three
  tab one plus two o.
four
  tab plus three one o.
five
  tab plus two three o.
nine
  tab five plus four o.
two_three_or_four
  tab two o;
  tab three o;
  tab three o;
  tab four o.
show
  tab one one two_three_or_four printlll o.
main
  b show o.
