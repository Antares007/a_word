o {
  G(Yellow) { P, Lime   (o, a, s); }
  G(Purple) { P, Fuchsia(o, a, s); }
  G(Red   ) { P, Maroon (o, a, s); }
  G(Green ) { P, Olive  (o, a, s); }
  G(Blue  ) { P, Navy   (o, a, s); }
}.
b {
  G(Navy  ) { P, Blue  (o, a, s); }
  G(Lime  ) { P, Green (o, a, s); }
  G(Maroon) { P, Red   (o, a, s); }
  G(Fuchsia){ P, Yellow(o, a, s); }
  G(Olive ) { P, Purple(o, a, s); }
}.
not {
  G(Yellow) { Lime  (o, a, s); }
  G(Red   ) { Yellow(o, a, s); }
  G(Green ) { Olive (o, a, s); }
  G(Lime  ) { Green (o, a, s); }
}.
and {
  G(Yellow) { Lime  (o, a, s); }
  G(Green ) { Yellow(o, a, s); }
  G(Lime  ) { Green (o, a, s); }
}.
or {
  G(Yellow) { Lime  (o, a, s); }
  G(Blue  ) { Yellow(o, a, s); }
  G(Green ) { Olive (o, a, s); }
  G(Lime  ) { Green (o, a, s); }
}.
orand {
  G(Yellow) { Lime  (o, a, s); }
  G(Blue  ) { Yellow(o, a, s); }
  G(Green ) { Yellow(o, a, s); }
  G(Lime  ) { Green (o, a, s); }
}.
one {
  G(Lime  ) {
    o[a++] = (void*)1;
    Lime(o, a, s);
  }
}.
plus {
  G(Green) {
    long r = (long)o[--a];
    long l = (long)o[--a];
    o[a++] = (void*)(l + r);
    Green(o, a, s);
  }
}.
print {
  void (*p)(const char *, ...);
  G(Green) {
    p = o[0];
    long r = (long)o[--a];
    p("%ld\n", r);
    Green(o, a, s);
  }
}.
tab {
  G(Navy)   { Blue  (o, a, s); }
  G(Lime)   { Green (o, a, s); }
  G(Maroon) { Red   (o, a, s); }
  G(Fuchsia){ Yellow(o, a, s); }
  G(Olive)  { ((n_t*)o)[s](o, a, s + 1); }
}.
two   { G(Lime) { o[--s] = Lime; ((c_t*)o)[2]("tab one  one   plus  o")(o, a, s); } }.
three { G(Lime) { o[--s] = Lime; ((c_t*)o)[2]("tab one  plus  two   o")(o, a, s); } }.
four  { G(Lime) { o[--s] = Lime; ((c_t*)o)[2]("tab plus three one   o")(o, a, s); } }.
five  { G(Lime) { o[--s] = Lime; ((c_t*)o)[2]("tab plus two   three o")(o, a, s); } }.
main {
  G(Yellow) { P, ((c_t*)o)[2]("b two print and five print o")(o, a, s); }
}.
m {
  G(Yellow ) { P, Yellow (o, a, s); }
  G(Purple ) { P, Purple (o, a, s); }
  G(Red    ) { P, Red    (o, a, s); }
  G(Green  ) { P, Green  (o, a, s); }
  G(Blue   ) { P, Blue   (o, a, s); }
  G(Navy   ) { P, Navy   (o, a, s); }
  G(Lime   ) { P, Lime   (o, a, s); }
  G(Maroon ) { P, Maroon (o, a, s); }
  G(Fuchsia) { P, Fuchsia(o, a, s); }
  G(Olive  ) { P, Olive  (o, a, s); }
}.
