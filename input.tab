o {
  G(Yellow  ) { P, Lime   (a, o, s); }
  G(Purple  ) {}
  G(Red     ) { P, Maroon (a, o, s); }
  G(Green   ) { P, Olive  (a, o, s); }
  G(Blue    ) { P, Navy   (a, o, s); }
}.
b {
  G(Navy    ) { P, Blue  (a, o, s); }
  G(Lime    ) { P, Green (a, o, s); }
  G(Maroon  ) { P, Red   (a, o, s); }
  G(Fuchsia ) {}
  G(Olive   ) { P, Yellow(a, o, s); }
}.
tab {
  G(Navy    ) { P, Blue  (a, o, s); }
  G(Lime    ) { P, Green (a, o, s); }
  G(Maroon  ) { P, Red   (a, o, s); }
  G(Fuchsia ) {}
  G(Olive   ) { P, ((n_t*)o)[s](a, o, s + 1); }
}.
not {
  G(Yellow) { Lime  (a, o, s); }
  G(Red   ) { Yellow(a, o, s); }
  G(Green ) { Olive (a, o, s); }
  G(Lime  ) { Green (a, o, s); }
}.
and {
  G(Yellow) { Lime  (a, o, s); }
  G(Green ) { Yellow(a, o, s); }
  G(Lime  ) { Green (a, o, s); }
}.
or {
  G(Yellow) { Lime  (a, o, s); }
  G(Blue  ) { Yellow(a, o, s); }
  G(Green ) { Olive (a, o, s); }
  G(Lime  ) { Green (a, o, s); }
}.
orand {
  G(Yellow) { Lime  (a, o, s); }
  G(Blue  ) { Yellow(a, o, s); }
  G(Green ) { Yellow(a, o, s); }
  G(Lime  ) { Green (a, o, s); }
}.
one {
  G(Lime  ) {
    o[a++] = (void*)1;
    Lime(a, o, s);
  }
}.
plus {
  G(Green) {
    long r = (long)o[--a];
    long l = (long)o[--a];
    o[a++] = (void*)(l + r);
    Green(a, o, s);
  }
}.
printl {
  void (*p)(const char *, ...);
  G(Green) { p = o[0]; long r = (long)o[--a]; p("%ld\n", r); Green(a, o, s); }
}.
prints {
  void (*p)(const char *, ...);
  G(Green) { p = o[0]; char* r = (char*)o[--a]; p("%s\n", r); Green(a, o, s); }
}.
tina  { G(Lime) { o[a++] = "თინა ";  Lime(a, o, s); } }.
kargi { G(Lime) { o[a++] = "კარგი "; Lime(a, o, s); } }.
gogoa { G(Lime) { o[a++] = "გოგოა "; Lime(a, o, s); } }.

//  S
//    "b" term;
//    S "a" term.
//  SS
//    S S.

two
  tab one one plus o.
three
  tab one plus two o.
four
  tab plus three one o.
five
  tab plus two three o.

b_t { G(Lime) { Lime(a, o, s); } }.
a_t { G(Lime) { Lime(a, o, s); } }.

main
  b two printl and five printl o.
main2
  b tina prints kargi gogoa prints prints o.
