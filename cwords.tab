b {
  G(Navy    ) { Red    (t, a, b, o, s); }
  G(Lime    ) { Yellow (t, a, b, o, s); }
  G(Maroon  ) { }
  G(Fuchsia ) { Yellow (t, a, b, o, s); }
  G(Olive   ) { }
}.
o {
  G(Yellow  ) { Olive  (t, a, b, o, s); }
  G(Purple  ) { Fuchsia(t, a, b, o, s); }
  G(Red     ) { Maroon (t, a, b, o, s); }
  G(Green   ) { Lime   (t, a, b, o, s); }
  G(Blue    ) { Navy   (t, a, b, o, s); }
}.
tab { 
  G(Navy    ) { ((n_t*)o)[b +          3](t, a, b + 4, o, s); }
  G(Lime    ) { ((n_t*)o)[b +          2](t, a, b + 4, o, s); }
  G(Maroon  ) { ((n_t*)o)[b +          1](t, a, b + 4, o, s); }
  G(Fuchsia ) { ((n_t*)o)[b + (long)o[b]](t, a, b + 3, o, s); }
  G(Olive   ) { ((n_t*)o)[b +          0](t, a, b + 4, o, s); }
}.
P {
  G(Yellow  ) { Red    (t, a - 1, b, o, o[a-1]); }
  G(Green   ) {                                  }
}.
R {
  G(Red     ) { Yellow (t, a, b, o, s); }
  G(Blue    ) { Green  (t, a, b, o, s); }
}.

print {
  N(printit) {
    const char*scolor = o[--a];
    n_t color = o[--a];
    Printf("P_%s(", scolor);
    for(long i = 3; i < a; i++)
      if((long)o[i] < 1000) Printf("%ld", (long)o[i]);
      else                  Printf("%s", o[i]);
    Printf(")\n");
    a = 3;
    color(t, a, b, o, s);
  }
  G(Yellow  ) { o[a++] = Yellow; o[a++] = "Yellow"; printit(t, a, b, o, s); }
  G(Green   ) { o[a++] = Green;  o[a++] = "Green";  printit(t, a, b, o, s); }
  G(Red     ) { o[a++] = Red;    o[a++] = "Red";    printit(t, a, b, o, s); }
  G(Blue    ) { o[a++] = Blue;   o[a++] = "Blue";   printit(t, a, b, o, s); }
}.
NOT {
  G(Yellow  ) { Lime  (t, a, b, o, s); }
  G(Red     ) { Yellow(t, a, b, o, s); }
  G(Green   ) { Olive (t, a, b, o, s); }
  G(Lime    ) { Green (t, a, b, o, s); } }.
AND {
  G(Yellow  ) { Lime  (t, a, b, o, s); }
  G(Green   ) { Yellow(t, a, b, o, s); }
  G(Lime    ) { Green (t, a, b, o, s); } }.
OR {
  G(Yellow  ) { Lime  (t, a, b, o, s); }
  G(Blue    ) { Yellow(t, a, b, o, s); }
  G(Green   ) { Olive (t, a, b, o, s); }
  G(Lime    ) { Green (t, a, b, o, s); } }.
ORAND {
  G(Yellow  ) { Lime  (t, a, b, o, s); }
  G(Blue    ) { Yellow(t, a, b, o, s); }
  G(Green   ) { Yellow(t, a, b, o, s); }
  G(Lime    ) { Green (t, a, b, o, s); } }.
id {
  G(Yellow  ) { Printf("Yellow "); Yellow  (t, a, b, o, s); }
  G(Purple  ) { Printf("Purple "); Purple  (t, a, b, o, s); }
  G(Red     ) { Printf("Red    "); Red     (t, a, b, o, s); }
  G(Green   ) { Printf("Green  "); Green   (t, a, b, o, s); }
  G(Blue    ) { Printf("Blue   "); Blue    (t, a, b, o, s); }
  G(Navy    ) { Printf("Navy   "); Navy    (t, a, b, o, s); }
  G(Lime    ) { Printf("Lime   "); Lime    (t, a, b, o, s); }
  G(Maroon  ) { Printf("Maroon "); Maroon  (t, a, b, o, s); }
  G(Fuchsia ) { Printf("Fuchsia"); Fuchsia (t, a, b, o, s); }
  G(Olive   ) { Printf("Olive  "); Olive   (t, a, b, o, s); } }.
