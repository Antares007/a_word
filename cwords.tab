b {
  G(Navy    ) { P; Blue                 ( t, a, b, o, s); }
  G(Lime    ) { P; Green                ( t, a, b, o, s); }
  G(Maroon  ) { P; Red                  ( t, a, b, o, s); }
  G(Fuchsia ) { P; if (t) Yellow        ( t, a, b, o, s); }
  G(Olive   ) { P; (Yellow_ray + t * 16)(!t, a, b, o, s); }
}.
o {
  G(Yellow  ) { P; Lime    (t, a, b, o, s); }
  G(Purple  ) { P; Fuchsia (t, a, b, o, s); }
  G(Red     ) { P; Maroon  (t, a, b, o, s); }
  G(Green   ) { P; Olive   (t, a, b, o, s); }
  G(Blue    ) { P; Navy    (t, a, b, o, s); }
}.
tab {
  G(Navy    ) { P; ((n_t *)o)[s + 0](t, a, b, o, s + 3); }
  G(Lime    ) { P; Green            (t, a, b, o, s); }
  G(Maroon  ) { P; ((n_t *)o)[s + 2](t, a, b, o, s + 3); }
  G(Fuchsia ) { P; ((n_t *)o)[s + 1](t, a, b, o, s + 3); }
  G(Olive   ) { P; ((n_t *)o)[s + 1](t, a, b, o, s + 3); }
}.
print {
  G(Green) {
    for(long i = 3; i < a; i++)
      Printf("%s", o[i]);
    Printf("\n");
    a = 3;
    Green(t,a,b,o,s);
  }
}.
NOT {
  G(Yellow  ) { P; Lime  (t, a, b, o, s); }
  G(Red     ) { P; Yellow(t, a, b, o, s); }
  G(Green   ) { P; Olive (t, a, b, o, s); }
  G(Lime    ) { P; Green (t, a, b, o, s); } }.
AND {
  G(Yellow  ) { P; Lime  (t, a, b, o, s); }
  G(Green   ) { P; Yellow(t, a, b, o, s); }
  G(Lime    ) { P; Green (t, a, b, o, s); } }.
OR {
  G(Yellow  ) { P; Lime  (t, a, b, o, s); }
  G(Blue    ) { P; Yellow(t, a, b, o, s); }
  G(Green   ) { P; Olive (t, a, b, o, s); }
  G(Lime    ) { P; Green (t, a, b, o, s); } }.
ORAND {
  G(Yellow  ) { P; Lime  (t, a, b, o, s); }
  G(Blue    ) { P; Yellow(t, a, b, o, s); }
  G(Green   ) { P; Yellow(t, a, b, o, s); }
  G(Lime    ) { P; Green (t, a, b, o, s); } }.
